-- UNION(합집합 중복X), UNION ALL(합집합 중복O), INTERSECT(교집합), MINUS(차집합)
-- 컬럼의 개수가 일치해야 사용가능
SELECT 'HONG', 20, '123123' AS 번호 FROM DUAL
UNION
SELECT 'PARK', 30, '321322' FROM DUAL
UNION
SELECT 'LEE', 10, '233233' FROM DUAL
UNION
SELECT FIRST_NAME, 20, '333333' FROM EMPLOYEES;

-- UNION
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%' --04년도 입사
UNION
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE DEPARTMENT_ID = 20; -- 부서 아이디 20

-- UNION ALL
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%' --04년도 입사
UNION ALL
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE DEPARTMENT_ID = 20; -- 부서 아이디 20

-- INTERSECT
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%' --04년도 입사
INTERSECT
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE DEPARTMENT_ID = 20; -- 부서 아이디 20

-- MINUS
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE HIRE_DATE LIKE '04%' --04년도 입사
MINUS
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES WHERE DEPARTMENT_ID = 20; -- 부서 아이디 20

----------------------------------------------------

-- 분석 함수
-- 분석 함수는 퍼센트, 순위 계산을 위해서 사용하는 함수
-- 함수구문 뒤에 OVER() 함수가 표현 됌
SELECT EMPLOYEE_ID,
       DEPARTMENT_ID,
       SALARY,
       RANK()       OVER(ORDER BY SALARY DESC) AS 중복순위O, 
       DENSE_RANK() OVER(ORDER BY SALARY DESC) AS 중복순위X,
       ROW_NUMBER() OVER(ORDER BY SALARY DESC) AS 일련번호,
       ROWNUM AS 조회순서,
       COUNT(*) OVER() AS 전체행개수
FROM EMPLOYEES
ORDER BY SALARY DESC;